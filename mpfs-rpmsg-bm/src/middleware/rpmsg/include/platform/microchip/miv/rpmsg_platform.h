/*
 * Copyright 2019-2021 Microchip FPGA Embedded Systems Solutions.
 * Copyright (c) 2016 Freescale Semiconductor, Inc.
 * Copyright 2016-2019 NXP
 * All rights reserved.
 *
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */
#ifndef RPMSG_PLATFORM_H_
#define RPMSG_PLATFORM_H_

#include <stdint.h>

/*
 * Linux requires the ALIGN to 0x1000(4KB) instead of 0x80
 */
#ifndef VRING_ALIGN
#define VRING_ALIGN (0x1000U)
#endif

/* contains pool of descriptors and two circular buffers */
#ifndef VRING_SIZE
#define VRING_SIZE (0x8000UL)
#endif

/* size of shared memory + 2*VRING size */
#define RL_VRING_OVERHEAD (2UL * VRING_SIZE)

#define RL_GET_VQ_ID(link_id, queue_id) (((queue_id)&0x1U) | (((link_id) << 1U) & 0xFFFFFFFEU))
#define RL_GET_LINK_ID(vq_id)           ((vq_id) >> 1U)
#define RL_GET_COM_ID(vq_id)            ((vq_id) >> 3U)
#define RL_GET_Q_ID(id)                 ((id)&0x1U)
#define RL_GET_COM_ID_FROM_LINK_ID(com_id)    ((com_id) >> 2U)

#define RL_GEN_LINK_ID(com_id, vring_id) (((com_id) << 2U) | (vring_id))
#define RL_GEN_MU_MSG(vq_id)             (uint32_t)(((vq_id)&0x7U)) /* com_id is discarded in msg */

#define RL_PLATFORM_VRING1_ID (0U)
#define RL_PLATFORM_VRING_USER_ID (1U)

typedef enum {
        RL_PLATFORM_MIV_IHC_CH0_ID,
        RL_PLATFORM_MIV_IHC_CH1_ID,
        RL_PLATFORM_MIV_IHC_CH2_ID,
        RL_PLATFORM_MIV_IHC_CH3_ID,
        RL_PLATFORM_MIV_IHC_CH4_ID,
        RL_PLATFORM_MIV_IHC_CH5_ID,
        RL_PLATFORM_MIV_IHC_CH6_ID,
        RL_PLATFORM_MIV_IHC_CH7_ID,
        RL_PLATFORM_MIV_IHC_CH8_ID,
        RL_PLATFORM_MIV_IHC_CH9_ID,
        RL_PLATFORM_MIV_IHC_CH10_ID,
        RL_PLATFORM_MIV_IHC_CH11_ID,
        RL_PLATFORM_MIV_IHC_CH12_ID,
        RL_PLATFORM_MIV_IHC_CH13_ID,
        RL_PLATFORM_MIV_IHC_CH14_ID,
        RL_PLATFORM_MIV_IHC_CH15_ID,
        RL_PLATFORM_MIV_IHC_CH16_ID,
        RL_PLATFORM_MIV_IHC_CH17_ID,
        RL_PLATFORM_MIV_IHC_CH18_ID,
        RL_PLATFORM_MIV_IHC_CH19_ID,
        RL_PLATFORM_MIV_IHC_CH20_ID,
        RL_PLATFORM_MIV_IHC_CH21_ID,
        RL_PLATFORM_MIV_IHC_CH22_ID,
        RL_PLATFORM_MIV_IHC_CH23_ID,
        RL_PLATFORM_MIV_IHC_CH24_ID,
        RL_PLATFORM_MIV_IHC_CH25_ID,
        RL_PLATFORM_MIV_IHC_CH26_ID,
        RL_PLATFORM_MIV_IHC_CH27_ID,
        RL_PLATFORM_MIV_IHC_CH28_ID,
        MAX_NUM_CHANNELS,
} IHC_Channels;

#define RL_PLATFORM_MIV_IHC_CH0_LINK_ID RL_GEN_LINK_ID(RL_PLATFORM_MIV_IHC_CH0_ID, RL_PLATFORM_VRING1_ID)
#define RL_PLATFORM_MIV_IHC_CH1_LINK_ID RL_GEN_LINK_ID(RL_PLATFORM_MIV_IHC_CH1_ID, RL_PLATFORM_VRING1_ID)
#define RL_PLATFORM_MIV_IHC_CH2_LINK_ID RL_GEN_LINK_ID(RL_PLATFORM_MIV_IHC_CH2_ID, RL_PLATFORM_VRING1_ID)
#define RL_PLATFORM_MIV_IHC_CH3_LINK_ID RL_GEN_LINK_ID(RL_PLATFORM_MIV_IHC_CH3_ID, RL_PLATFORM_VRING1_ID)
#define RL_PLATFORM_MIV_IHC_CH4_LINK_ID RL_GEN_LINK_ID(RL_PLATFORM_MIV_IHC_CH4_ID, RL_PLATFORM_VRING1_ID)
#define RL_PLATFORM_MIV_IHC_CH5_LINK_ID RL_GEN_LINK_ID(RL_PLATFORM_MIV_IHC_CH5_ID, RL_PLATFORM_VRING1_ID)
#define RL_PLATFORM_MIV_IHC_CH6_LINK_ID RL_GEN_LINK_ID(RL_PLATFORM_MIV_IHC_CH6_ID, RL_PLATFORM_VRING1_ID)
#define RL_PLATFORM_MIV_IHC_CH7_LINK_ID RL_GEN_LINK_ID(RL_PLATFORM_MIV_IHC_CH7_ID, RL_PLATFORM_VRING1_ID)
#define RL_PLATFORM_MIV_IHC_CH8_LINK_ID RL_GEN_LINK_ID(RL_PLATFORM_MIV_IHC_CH8_ID, RL_PLATFORM_VRING1_ID)
#define RL_PLATFORM_MIV_IHC_CH9_LINK_ID RL_GEN_LINK_ID(RL_PLATFORM_MIV_IHC_CH9_ID, RL_PLATFORM_VRING1_ID)
#define RL_PLATFORM_MIV_IHC_CH10_LINK_ID RL_GEN_LINK_ID(RL_PLATFORM_MIV_IHC_CH10_ID, RL_PLATFORM_VRING1_ID)
#define RL_PLATFORM_MIV_IHC_CH11_LINK_ID RL_GEN_LINK_ID(RL_PLATFORM_MIV_IHC_CH11_ID, RL_PLATFORM_VRING1_ID)
#define RL_PLATFORM_MIV_IHC_CH12_LINK_ID RL_GEN_LINK_ID(RL_PLATFORM_MIV_IHC_CH12_ID, RL_PLATFORM_VRING1_ID)
#define RL_PLATFORM_MIV_IHC_CH13_LINK_ID RL_GEN_LINK_ID(RL_PLATFORM_MIV_IHC_CH13_ID, RL_PLATFORM_VRING1_ID)
#define RL_PLATFORM_MIV_IHC_CH14_LINK_ID RL_GEN_LINK_ID(RL_PLATFORM_MIV_IHC_CH14_ID, RL_PLATFORM_VRING1_ID)
#define RL_PLATFORM_MIV_IHC_CH15_LINK_ID RL_GEN_LINK_ID(RL_PLATFORM_MIV_IHC_CH15_ID, RL_PLATFORM_VRING1_ID)
#define RL_PLATFORM_MIV_IHC_CH16_LINK_ID RL_GEN_LINK_ID(RL_PLATFORM_MIV_IHC_CH16_ID, RL_PLATFORM_VRING1_ID)
#define RL_PLATFORM_MIV_IHC_CH17_LINK_ID RL_GEN_LINK_ID(RL_PLATFORM_MIV_IHC_CH17_ID, RL_PLATFORM_VRING1_ID)
#define RL_PLATFORM_MIV_IHC_CH18_LINK_ID RL_GEN_LINK_ID(RL_PLATFORM_MIV_IHC_CH18_ID, RL_PLATFORM_VRING1_ID)
#define RL_PLATFORM_MIV_IHC_CH19_LINK_ID RL_GEN_LINK_ID(RL_PLATFORM_MIV_IHC_CH19_ID, RL_PLATFORM_VRING1_ID)
#define RL_PLATFORM_MIV_IHC_CH20_LINK_ID RL_GEN_LINK_ID(RL_PLATFORM_MIV_IHC_CH20_ID, RL_PLATFORM_VRING1_ID)
#define RL_PLATFORM_MIV_IHC_CH21_LINK_ID RL_GEN_LINK_ID(RL_PLATFORM_MIV_IHC_CH21_ID, RL_PLATFORM_VRING1_ID)
#define RL_PLATFORM_MIV_IHC_CH22_LINK_ID RL_GEN_LINK_ID(RL_PLATFORM_MIV_IHC_CH22_ID, RL_PLATFORM_VRING1_ID)
#define RL_PLATFORM_MIV_IHC_CH23_LINK_ID RL_GEN_LINK_ID(RL_PLATFORM_MIV_IHC_CH23_ID, RL_PLATFORM_VRING1_ID)
#define RL_PLATFORM_MIV_IHC_CH24_LINK_ID RL_GEN_LINK_ID(RL_PLATFORM_MIV_IHC_CH24_ID, RL_PLATFORM_VRING1_ID)
#define RL_PLATFORM_MIV_IHC_CH25_LINK_ID RL_GEN_LINK_ID(RL_PLATFORM_MIV_IHC_CH25_ID, RL_PLATFORM_VRING1_ID)
#define RL_PLATFORM_MIV_IHC_CH26_LINK_ID RL_GEN_LINK_ID(RL_PLATFORM_MIV_IHC_CH26_ID, RL_PLATFORM_VRING1_ID)
#define RL_PLATFORM_MIV_IHC_CH27_LINK_ID RL_GEN_LINK_ID(RL_PLATFORM_MIV_IHC_CH27_ID, RL_PLATFORM_VRING1_ID)
#define RL_PLATFORM_MIV_IHC_CH28_LINK_ID RL_GEN_LINK_ID(RL_PLATFORM_MIV_IHC_CH28_ID, RL_PLATFORM_VRING1_ID)

#define RL_PLATFORM_HIGHEST_LINK_ID RL_GEN_LINK_ID(RL_PLATFORM_MIV_IHC_CH28_ID, RL_PLATFORM_VRING_USER_ID)

/* platform interrupt related functions */
int32_t platform_init_interrupt(uint32_t vector_id, void *isr_data);
int32_t platform_deinit_interrupt(uint32_t vector_id);
int32_t platform_interrupt_enable(uint32_t vector_id);
int32_t platform_interrupt_disable(uint32_t vector_id);
int32_t platform_in_isr(void);
void platform_notify(uint32_t vector_id);

#ifdef REMOTEPROC
void platform_ready(uint32_t link_id);
#endif

/* platform low-level time-delay (busy loop) */
void platform_time_delay(uint32_t num_msec);

/* platform memory functions */
void platform_map_mem_region(uint32_t vrt_addr, uint32_t phy_addr, uint32_t size, uint32_t flags);
void platform_cache_all_flush_invalidate(void);
void platform_cache_disable(void);
uint64_t platform_vatopa(void *addr);
void *platform_patova(uint64_t addr);

/* platform init/deinit */
int32_t platform_init(void);
int32_t platform_deinit(void);

#endif /* RPMSG_PLATFORM_H_ */